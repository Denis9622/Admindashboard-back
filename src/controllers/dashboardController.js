import Order from '../models/order.js';
import Customer from '../models/customer.js';
import Product from '../models/product.js';
import Supplier from '../models/supplier.js';
import createHttpError from 'http-errors';

// üìå –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤)
export async function getDashboardStatistics(req, res) {
  try {
    const totalProducts = await Product.countDocuments();
    const totalSuppliers = await Supplier.countDocuments();
    const totalCustomers = await Customer.countDocuments();
    const totalOrders = await Order.countDocuments();

    res
      .status(200)
      .json({ totalProducts, totalSuppliers, totalCustomers, totalOrders });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
}

// üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
export async function getRecentCustomers(req, res) {
  try {
    const recentCustomers = await Customer.find()
      .sort({ createdAt: -1 })
      .limit(5);
    res.status(200).json(recentCustomers);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤' });
  }
}

// üìå –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–∞–º
export async function getIncomeExpenses(req, res) {
  try {
    let { startDate, endDate } = req.query;

    // –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî –±–µ—Ä–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const dateFilter =
      startDate && endDate
        ? { createdAt: { $gte: new Date(startDate), $lte: new Date(endDate) } }
        : {};

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã (–¥–æ—Ö–æ–¥—ã) –∏ –∑–∞–∫—É–ø–∫–∏ (—Ä–∞—Å—Ö–æ–¥—ã)
    const orders = await Order.find(dateFilter);
    const expenses = await Supplier.find(dateFilter);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const transactions = [
      ...orders.map((order) => ({
        type: 'Income',
        name: order.customerName,
        amount: order.price,
      })),
      ...expenses.map((expense) => ({
        type: 'Expense',
        name: expense.company,
        amount: -expense.amount, // –ú–∏–Ω—É—Å –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
      })),
    ];

    res.status(200).json({ transactions });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π' });
  }
}





export async function getCustomersWithSpent(req, res, next) {
  try {
    const customers = await Customer.find();

    // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    const customersWithSpent = await Promise.all(
      customers.map(async (customer) => {
        const orders = await Order.find({ customer: customer._id }); // ‚úÖ –ò—â–µ–º –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
        const totalSpent = orders.reduce((sum, order) => sum + order.price, 0); // ‚úÖ –°–∫–ª–∞–¥—ã–≤–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤

        return {
          ...customer.toObject(),
          totalSpent,
        };
      }),
    );

    res.status(200).json(customersWithSpent);
  } catch (error) {
    next(createHttpError(500, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Ö —Ç—Ä–∞—Ç–∞–º–∏'));
  }
}


// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è Dashboard –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Orders)
export async function getAllOrders(req, res) {
  try {
    const orders = await Order.find().populate('customer'); // ‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
    res.status(200).json(orders);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤' });
  }
}

