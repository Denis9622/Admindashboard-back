import Customer from '../models/customer.js';
import createHttpError from 'http-errors';

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (GET)
export async function getAllCustomers(req, res, next) {
  try {
    const customers = await Customer.find();
    res.status(200).json(customers);
  } catch (error) {
    next(createHttpError(500, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤'));
  }
}

// üìå –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (POST)
export async function createCustomer(req, res, next) {
  try {
    const { name, email, address, phone } = req.body;
    const newCustomer = await Customer.create({ name, email, address, phone });
    res.status(201).json(newCustomer);
  } catch (error) {
    next(createHttpError(500, '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞'));
  }
}

// üìå –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (PUT)
export async function updateCustomer(req, res, next) {
  try {
    const { id } = req.params;
    const updatedCustomer = await Customer.findByIdAndUpdate(id, req.body, {
      new: true,
    });
    if (!updatedCustomer) throw createHttpError(404, '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    res.status(200).json(updatedCustomer);
  } catch (error) {
    next(error);
  }
}

// üìå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (DELETE)
export async function deleteCustomer(req, res, next) {
  try {
    const { id } = req.params;
    const deletedCustomer = await Customer.findByIdAndDelete(id);
    if (!deletedCustomer) throw createHttpError(404, '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    res.status(204).send();
  } catch (error) {
    next(error);
  }
}
